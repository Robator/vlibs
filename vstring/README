//=======================================================================================
//      VString README
//=======================================================================================

    VString -- буффер для оперирования бинарными данными (не только, но это --
    основная задача).

    В этом документе приведен интерфейс класа и примеры использования. 
    Для чего сделан этот класс и почему он сделан именно так, см. README_DISSCUSS.

//=======================================================================================

        ОГЛАВЛЕНИЕ

    Конструкторы

    Шестнадцатеричные строки

    prepend/append
    prepend/append LE/BE

    front/back LE/BE
    front/back str

    take front/back LE/BE
    take front/back str

    chop front/back
    
    begins_with/ends_with

    trimmed

    split

    split_without_empties

    split_by_spaces


    forward_view -- просмотр константной строки вперед.
        remained
        finished

        show LE/BE
        show_str

        take LE/BE
        take_str

//=======================================================================================
        Конструкторы

    Все конструкторы std::string проксированы. Повторять нет смысла.
    http://www.cplusplus.com/reference/string/string/string/
    
//=======================================================================================
        Шестнадцатеричные строки

    Преобразование из шестнадцатеричных ASCII-строк:    
        static VString from_hex( const std::string &src );
        VString from_hex() const;
    
    Все символы, не входящие в набор 0-9, a-f, A-F игнорируются. 
    при необходимости более строгого контроля потока, его следует делать самим.
        vdeb << VString::from_hex("Abracadabra").to_Hex(); // 0A BA CA DA BA
    
    При нечетном количестве шестнадцатеричных символов, считается, что первый байт 
    обозначен одним символом:
        vdeb << VString::from_hex("123").to_Hex(); // 01 23
    

    За преобразование в Hex-ASCII отвечают методы:
        VString tohex () const;                         // сплошным текстом, строчными.
        VString toHex () const;                         // сплошным текстом, Заглавными.
        VString to_hex( char separator = ' ' ) const;   // с разделителями, строчными.
        VString to_Hex( char separator = ' ' ) const;   // с разделителями, Заглавными.
    
    Пример:
        VString test; 
        test.append( char(0x05) );
        test.append( char(0x0A) );
        test.append( char(0x1B) );
        vdeb << test.tohex();       // "050a1b"
        vdeb << test.toHex();       // "050A1B"
        vdeb << test.to_hex();      // "05 0a 1b"
        vdeb << test.to_Hex();      // "05 0A 1B"
        vdeb << test.to_Hex('#');   // "05#0A#1B"

    см. тесты.
//=======================================================================================
        prepend/append

    Действуют для строк и для итераторов любых контейнеров с элементами размером в байт.
    см. тесты.

//=======================================================================================
        prepend/append LE/BE

    Сериализация численных типов. Проводится проверка на размер: 1, 2, 4, 8 и на
    примитивность типа.

        void prepend_LE ( T val );
        void prepend_BE ( T val );

        void append_LE  ( T val );
        void append_BE  ( T val );

    См. тест prepend_append_LE_BE

//=======================================================================================
        front/back str
        front/back LE/BE

    Просмотр данных в строке.
    См. тест front_back_str_LE_BE
        
//=======================================================================================
        take front/back str
        take front/back LE/BE

    Извлекает значения с начала / с конца.

    NB! Если строка большая, то извлечение с начала будет медленным.
    Т.е. если вам надо извлечь, например, с десяток полей, можете даже не заморачиваться.
    А вот если у вас буфер метровой длины, то извлечение с начала _может_ вызвать
    постоянные переносы памяти (это зависит от реализации библиотеки).
    В таких случаях рекомендуется пользоваться forward_view() (см. ниже).

    См. тест take_front_back_str_LE_BE

//=======================================================================================
        chop front/back

    Отрезает указанное количество байт с начала / с конца.

    См. тест chop_front_back
    
//=======================================================================================
        begins_with/ends_with

    Тест наличия предложенных строк в начале / в конце строки.

    См. тест begins_with_ends_with

//=======================================================================================
        trimmed

    Возвращает строку без начальных и конечных пробельных символов.
    NB! Пробельные символы определяются функцией isspace() и еще '\n'!

    NB! Сама строка остается константной!
    Т.е. если надо вырезать из строки пробельные символы, то делайте так:
        str = str.trimmed();

//=======================================================================================
        split

    Режет строку на части по указанному символу-разделителю.
    Если в строке символы-разделители идут подряд, в результат будут помещены пустые
    строки.

//=======================================================================================
        split_without_empties

    То же что split, но без пустых строк.

//=======================================================================================
        split_by_spaces

    Разрезает строку, используя в качестве разделителей isspace(), '\n'.
    Не сохраняет пустых значений.

//=======================================================================================

//=======================================================================================
        forward_view

    Если постоянно извлекать значения с начала строки, то могут быть постоянные
    копирования памяти. Чтобы избежать никому не нужных расходов, можно просмотреть
    строку не изменяя ее.
    См. тест forward_view

    NB! При использовании этого класса ни в коем случае нельзя изменять исходную строку!

    Метод forward_view() возвращает объект класса VString::ForwardView, у которого стоит
    задача: не изменяя саму строку, дать возможность просмотреть ее с начала.

        remained() -- сколько байт осталось к простмотру.
        finished() -- к просмотру ничего не осталось.

        show LE/BE -- группа методов просмотра значений не двигаясь по строке.
        show_str

        take LE/BE -- группа методов, которые двигаются по строке.
        take_str

    NB! При использовании этого класса ни в коем случае нельзя изменять исходную строку!

//=======================================================================================
//      VString README
//=======================================================================================

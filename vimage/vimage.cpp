#include "vimage.h"

#include <assert.h>

//=======================================================================================
VImage::VImage()
{}
//=======================================================================================
VImage::VImage( VImage::Impl_Ptr &&ptr )
    : p( std::move(ptr) )
{}
//=======================================================================================
VImage::VImage( const VImage::Impl_Ptr &ptr )
    : p( ptr )
{}
//=======================================================================================
VImage::~VImage()
{}
//=======================================================================================
VImage::Impl::~Impl()
{}
//=======================================================================================
const VImage::data_t* VImage::Impl::line(int row) const
{
    assert( row < height() );
    return data() + row * bytes_per_line();
}
//=======================================================================================
bool VImage::is_valid() const
{
    return bool(p);
}
//=======================================================================================
VImage::Format VImage::format() const
{
    return is_valid() ? p->format() : Format::Invalid;
}
//=======================================================================================
int VImage::width() const
{
    return is_valid() ? p->width() : -1;
}
//=======================================================================================
int VImage::height() const
{
    return is_valid() ? p->height() : -1;
}
//=======================================================================================
int VImage::bytes_per_line() const
{
    return is_valid() ? p->bytes_per_line() : -1;
}
//=======================================================================================
const VImage::data_t *VImage::data() const
{
    return is_valid() ? p->data() : nullptr;
}
//=======================================================================================
const VImage::data_t *VImage::line(int row) const
{
    return is_valid() ? p->line(row) : nullptr;
}
//=======================================================================================
void VImage::detach()
{
    if ( p.use_count() <= 1 ) return;
    p = p->copy();
}
//=======================================================================================

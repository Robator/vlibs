#include "nobject.h"

#include <assert.h>


//=======================================================================================
//      Object
//=======================================================================================
NObject::NObject( GObject *obj )
    : _g_object( obj )
{
    if ( obj ) _p.reset( obj, g_object_unref );
}
//=======================================================================================
NObject::~NObject()
{}
//=======================================================================================
bool NObject::is_null() const
{
    return !_p;
}
//=======================================================================================
uint NObject::ref_count( const GObject *obj )
{
    assert( obj );
    return obj->ref_count;
}
//=======================================================================================
uint NObject::ref_count() const
{
    return _p ? ref_count(_p.get()) : 0;
}
//=======================================================================================
std::string NObject::type_name( const GObject *obj )
{
    assert( obj );
    // Чистить не надо, оно статическое.
    return g_type_name( obj->g_type_instance.g_class->g_type );
}
//=======================================================================================
std::string NObject::type_name() const
{
    return type_name( _g_object );
}
//=======================================================================================
//      Object
//=======================================================================================

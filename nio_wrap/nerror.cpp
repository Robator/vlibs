#include "nerror.h"

#include <sstream>

using namespace std;



//=======================================================================================
NException::NException( const std::string &msg )
    : runtime_error( msg )
{}
//=======================================================================================






//=======================================================================================
//      Error
//=======================================================================================
NError::NError()
{}
//=======================================================================================
bool NError::has() const
{
    return bool( p );
}
//=======================================================================================
std::string NError::message() const
{
    return p ? p->message : std::string();
}
//=======================================================================================
uint32_t NError::domain() const
{
    return p ? p->domain : 0;
}
//=======================================================================================
int NError::code() const
{
    return p ? p->code : 0;
}
//=======================================================================================
string NError::deb_msg() const
{
    return p ? _deb_msg( p.get() ) : string();
}
//=======================================================================================
string NError::_deb_msg( GError *err )
{
    stringstream ss;
    ss << err->message << " [" << err->domain << ":" << err->code << "]";
    return ss.str();
}
//=======================================================================================
NError::NError( GError *err )
{
    _set( err );
}
//=======================================================================================
void NError::_set(GError *err)
{
    if (err) p.reset( err, g_error_free );
    else     p.reset();
}
//=======================================================================================
//      _ErrorProxy
//=======================================================================================
_n_error_proxy::_n_error_proxy( NError *err )
    : _target( err )
{}
//=======================================================================================
_n_error_proxy::~_n_error_proxy()
{
    // Я знаю, что нельзя бросать исключения из деструктора, но здесь обратный случай,
    // когда класс используется для оповещения об ошибке.
    if (_target)
    {
        _target->_set( _gerror );
    }
    else if ( _gerror )
    {
        string msg = NError::_deb_msg( _gerror );
        g_error_free( _gerror );
        throw NException( msg );
    }
}
//=======================================================================================
_n_error_proxy::operator GError **()
{
    return &_gerror;
}
//=======================================================================================
//      _ErrorProxy
//=======================================================================================
//      Error
//=======================================================================================




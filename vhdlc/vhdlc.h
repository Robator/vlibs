/****************************************************************************************
**
**  VLIBS codebase, NIIAS
**
**  Authors:
**  Alexandre Gromtsev aka elapidae     elapidae@yandex.ru
**  Nadezhda Churikova aka claorisel    claorisel@gmail.com
**  Ekaterina Boltenkova aka kataretta  kitkat52@yandex.ru
**  Ivan Deylid aka sid1057             ivanov.dale@gmail.com>
**
**  GNU Lesser General Public License Usage
**  This file may be used under the terms of the GNU Lesser General Public License
**  version 3 as published by the Free Software Foundation and appearing in the file
**  LICENSE.LGPL3 included in the packaging of this file. Please review the following
**  information to ensure the GNU Lesser General Public License version 3 requirements
**  will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
****************************************************************************************/


#ifndef VHDLC_H
#define VHDLC_H

#include <stdexcept>
#include "vstring.h"
#include "vcallback.h"

//=======================================================================================
//  Decoder and encoder for HDLC protocol.
//  https://ru.wikipedia.org/wiki/HDLC
//
//  HDLC -- очень простой протокол передачи сериализованных данных, чтобы можно было
//  выделить из байтового потока сообщения - пакеты. 
//
//  Принцип протокола: байт 0x7E считается границей между пакетами и, если он входит в 
//  состав пакета, экранируется в последовательность { 0x7D, 0x5E }. Соответственно,
//  байт 0x7D экранируется как { 0x7D, 0x5D }. Очень простой и элегантный подход,
//  прекрасно подходит для прослушивания с произвольной позиции.
//=======================================================================================

//=======================================================================================
/*  UPD 30.01.2019  by Elapidae
 *
 *  - received() не вызывается для пустых пакетов.
 *
 *  - Обрабатывается ситуация, когда вылавливаем поток не с начала, до появления
 *    маркера начала пакета (7E) будет вызываться lost_from_begin(). Можно контролировать
 *    качество/количество выкинутых из потока данных. Если по условию задачи нужно, чтобы 
 *    поток принимался с начала, следует присоединиться к этому колбэку и при вызове 
 *    обработать эту ситуацию. 
 *    NB! не вздумайте "убивать" парсер, т.к. будете на стеке вызова из него.
 *
 *  - Добавлена ошибка Error, которая бросается при некорректном потоке данных (когда 
 *    будет неверная escape последовательность или превышен лимит длины пакета).
 *    Если надо не падать, ее надо вылавливать во внешнем коде. Перед бросанием
 *    исключения, объект сбрасывается. Т.е. переходит в состояние до приема первого
 *    маркера начала пакета (в любом случае, поток уже неконсистентный).
 *
 *  - Добавлен контроль размера пакетов, чтобы поведение по умолчанию предусматривало
 *    контроль переполнения. Максимальный размер по умолчанию: Max_Packet_Size = 1500.
*/
//=======================================================================================


//=======================================================================================
namespace VHDLC
{
    //-----------------------------------------------------------------------------------
    //  Выдаст легитимный пакет с экранированными 7E и 7D.
    std::string encode( const std::string& packet );
    //-----------------------------------------------------------------------------------    
    class Decoder
    {
    public:
        //-------------------------------------------------------------------------------
        enum { Max_Packet_Size = 1500 };
        class Error;
        //-------------------------------------------------------------------------------
        //  Для контроля переполнения контролируется максимальный размер пакета.
        //  0 -- не контролировать.
        explicit Decoder( size_t max_packet_size = Max_Packet_Size );

        //  Подается по приеме нового пакета.
        VCallBack<VString> received;

        //  Если первый символ не 7E, то этот сигнал сообщит о потерях в начале.
        VCallBack<char> lost_from_begin;

        //  Сюда заливаем данные для декодирования.
        void append( const std::string& app_data );

        //-------------------------------------------------------------------------------
    private:

        VString _buffer;
        bool    _packet_began;                  //  Обозначает что нашли первый 7E.
        bool    _escaped;                       //  Ждем приход второго escape символа.
        size_t  _max_packet_size;

        void _buf_append( char ch );
        void _buf_send();
        [[noreturn]] void _throw_error( const std::string& msg );
    };
    //-----------------------------------------------------------------------------------
} // VHDLC namespace
//=======================================================================================
class VHDLC::Decoder::Error : public std::runtime_error
{
public:
    Error( const std::string& msg );
};
//=======================================================================================


#endif // VHDLC_H


#include "varg.h"

#include <iostream>
#include <assert.h>

using namespace std;

//=======================================================================================
//      Конструирование
//=======================================================================================
class varg::Pimpl
{
public:
    std::stringstream stream;
    bool with_spaces   = false;
    bool long_floating = false;

    void print_double( const double &d );
};
//=======================================================================================
varg::varg()
    : p( new Pimpl )
{
    // Выставление значений по умолчанию.
    p->stream << std::boolalpha << std::showbase;
}
//=======================================================================================
varg &varg::with_zeroes( int val, int field_width )
{
    assert(field_width >= 0);
    string spec = varg("%0", field_width, 'd').str();

    char buf[32];
    std::snprintf( buf, sizeof buf, spec.c_str(), val );
    p->stream << buf;
    return *this;
}
//=======================================================================================
//varg &varg::spec(int val, int min_len, char leading_symbol)
//{
//    bool negative = val < 0;
//    val = negative ? -val : val;
//    auto str = varg(val).str();
//    int real_len = str.size() + negative ? 1 : 0;
//    int leading_count = min_len - real_len;
//}
//=======================================================================================
stringstream &varg::_stream()
{
    return p->stream;
}
//=======================================================================================
//      Конструирование
//=======================================================================================


//=======================================================================================
//      Печать с пробелами
//=======================================================================================
varg &varg::operator()( varg::_nospace )
{
    p->with_spaces = false;
    return *this;
}
//=======================================================================================
varg &varg::operator()( varg::_space )
{
    p->with_spaces = true;
    return *this;
}
//=======================================================================================
void varg::_apply_spaces()
{
    if (p->with_spaces)
        p->stream << ' ';
}
//=======================================================================================
//      Печать с пробелами
//=======================================================================================


//=======================================================================================
//      Печать чисел с плавающей точкой
//=======================================================================================
varg &varg::operator()(varg::_long_fp)
{
    p->long_floating = true;
    return *this;
}
//=======================================================================================
varg &varg::operator()(varg::_std_fp)
{
    p->long_floating = false;
    return *this;
}
//=======================================================================================
void varg::Pimpl::print_double( const double &d )
{
    //  Код скопипащен из json11...
    char buf[32];
    std::snprintf( buf, sizeof buf, "%.17g", d );
    stream << buf;
}
//=======================================================================================
varg &varg::operator()( const double &d )
{
    if ( p->long_floating )
        p->print_double( d );
    else
        p->stream << d;

    _apply_spaces();

    return *this;
}
//=======================================================================================
varg &varg::operator()( const float &f )
{
    return operator()( double(f) );
}
//=======================================================================================
//      Печать чисел с плавающей точкой
//=======================================================================================


//=======================================================================================
//      Результаты работы, строки и вывод в консоль
//=======================================================================================
varg::operator string() const
{
    return str();
}
//=======================================================================================
string varg::str() const
{
    return p->stream.str();
}
//=======================================================================================
void varg::println() const
{
    std::cout << str() << std::endl;
}
//=======================================================================================
//      Результаты работы, строки и вывод в консоль
//=======================================================================================


//=======================================================================================
//      Прокси модификаторов и выравниваний
//=======================================================================================
varg &varg::operator()( const decltype(std::hex)& modifier )
{
    p->stream << modifier;
    return *this;
}
//=======================================================================================
varg &varg::width(int w)
{
    p->stream.width(w);
    return *this;
}
//=======================================================================================
varg &varg::right()
{
    p->stream << std::right;
    return *this;
}
//=======================================================================================
varg &varg::left()
{
    p->stream << std::left;
    return *this;
}
//=======================================================================================
//      Прокси модификаторов и выравниваний
//=======================================================================================

